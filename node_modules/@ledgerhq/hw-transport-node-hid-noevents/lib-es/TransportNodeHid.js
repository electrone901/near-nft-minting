var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import HID from "node-hid";
import { log } from "@ledgerhq/logs";
import Transport from "@ledgerhq/hw-transport";
import { ledgerUSBVendorId } from "@ledgerhq/devices";
import hidFraming from "@ledgerhq/devices/lib/hid-framing";
import { identifyUSBProductId, identifyProductName } from "@ledgerhq/devices";
import { TransportError, DisconnectedDevice, DisconnectedDeviceDuringOperation, } from "@ledgerhq/errors";
var filterInterface = function (device) {
    return ["win32", "darwin"].includes(process.platform)
        ? device.usagePage === 0xffa0
        : device.interface === 0;
};
export function getDevices() {
    return HID.devices(ledgerUSBVendorId, 0x0).filter(filterInterface);
}
/**
 * node-hid Transport minimal implementation
 * @example
 * import TransportNodeHid from "@ledgerhq/hw-transport-node-hid-noevents";
 * ...
 * TransportNodeHid.create().then(transport => ...)
 */
var TransportNodeHidNoEvents = /** @class */ (function (_super) {
    __extends(TransportNodeHidNoEvents, _super);
    function TransportNodeHidNoEvents(device) {
        var _this = _super.call(this) || this;
        _this.channel = Math.floor(Math.random() * 0xffff);
        _this.packetSize = 64;
        _this.disconnected = false;
        _this.setDisconnected = function () {
            if (!_this.disconnected) {
                _this.emit("disconnect");
                _this.disconnected = true;
            }
        };
        _this.writeHID = function (content) {
            var data = [0x00];
            for (var i = 0; i < content.length; i++) {
                data.push(content[i]);
            }
            try {
                _this.device.write(data);
                return Promise.resolve();
            }
            catch (e) {
                var maybeMappedError = e && e.message ? new DisconnectedDeviceDuringOperation(e.message) : e;
                if (maybeMappedError instanceof DisconnectedDeviceDuringOperation) {
                    _this.setDisconnected();
                }
                return Promise.reject(maybeMappedError);
            }
        };
        _this.readHID = function () {
            return new Promise(function (resolve, reject) {
                return _this.device.read(function (e, res) {
                    if (!res) {
                        return reject(new DisconnectedDevice());
                    }
                    if (e) {
                        var maybeMappedError = e && e.message
                            ? new DisconnectedDeviceDuringOperation(e.message)
                            : e;
                        if (maybeMappedError instanceof DisconnectedDeviceDuringOperation) {
                            _this.setDisconnected();
                        }
                        reject(maybeMappedError);
                    }
                    else {
                        var buffer = Buffer.from(res);
                        resolve(buffer);
                    }
                });
            });
        };
        _this.device = device;
        // @ts-expect-error accessing low level API in C
        var info = device.getDeviceInfo();
        _this.deviceModel =
            info && info.product ? identifyProductName(info.product) : null;
        return _this;
    }
    /**
     * if path="" is not provided, the library will take the first device
     */
    TransportNodeHidNoEvents.open = function (path) {
        return Promise.resolve().then(function () {
            if (path) {
                return new TransportNodeHidNoEvents(new HID.HID(path));
            }
            var device = getDevices()[0];
            if (!device)
                throw new TransportError("NoDevice", "NoDevice");
            return new TransportNodeHidNoEvents(new HID.HID(device.path));
        });
    };
    /**
     * Exchange with the device using APDU protocol.
     * @param apdu
     * @returns a promise of apdu response
     */
    TransportNodeHidNoEvents.prototype.exchange = function (apdu) {
        return __awaiter(this, void 0, void 0, function () {
            var b;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.exchangeAtomicImpl(function () { return __awaiter(_this, void 0, void 0, function () {
                            var _a, channel, packetSize, framing, blocks, i, result, acc, buffer;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _a = this, channel = _a.channel, packetSize = _a.packetSize;
                                        log("apdu", "=> " + apdu.toString("hex"));
                                        framing = hidFraming(channel, packetSize);
                                        blocks = framing.makeBlocks(apdu);
                                        i = 0;
                                        _b.label = 1;
                                    case 1:
                                        if (!(i < blocks.length)) return [3 /*break*/, 4];
                                        return [4 /*yield*/, this.writeHID(blocks[i])];
                                    case 2:
                                        _b.sent();
                                        _b.label = 3;
                                    case 3:
                                        i++;
                                        return [3 /*break*/, 1];
                                    case 4:
                                        if (!!(result = framing.getReducedResult(acc))) return [3 /*break*/, 6];
                                        return [4 /*yield*/, this.readHID()];
                                    case 5:
                                        buffer = _b.sent();
                                        acc = framing.reduceResponse(acc, buffer);
                                        return [3 /*break*/, 4];
                                    case 6:
                                        log("apdu", "<= " + result.toString("hex"));
                                        return [2 /*return*/, result];
                                }
                            });
                        }); })];
                    case 1:
                        b = _a.sent();
                        return [2 /*return*/, b];
                }
            });
        });
    };
    TransportNodeHidNoEvents.prototype.setScrambleKey = function () { };
    /**
     * release the USB device.
     */
    TransportNodeHidNoEvents.prototype.close = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.exchangeBusyPromise];
                    case 1:
                        _a.sent();
                        this.device.close();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     */
    TransportNodeHidNoEvents.isSupported = function () {
        return Promise.resolve(typeof HID.HID === "function");
    };
    /**
     *
     */
    TransportNodeHidNoEvents.list = function () {
        return Promise.resolve(getDevices().map(function (d) { return d.path; }));
    };
    /**
     */
    TransportNodeHidNoEvents.listen = function (observer) {
        getDevices().forEach(function (device) {
            var deviceModel = identifyUSBProductId(device.productId);
            observer.next({
                type: "add",
                descriptor: device.path,
                deviceModel: deviceModel,
                device: device
            });
        });
        observer.complete();
        return {
            unsubscribe: function () { }
        };
    };
    return TransportNodeHidNoEvents;
}(Transport));
export default TransportNodeHidNoEvents;
//# sourceMappingURL=TransportNodeHid.js.map