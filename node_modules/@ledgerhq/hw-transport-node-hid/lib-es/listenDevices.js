var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import EventEmitter from "events";
import { getDevices } from "@ledgerhq/hw-transport-node-hid-noevents";
import { log } from "@ledgerhq/logs";
import usb from "usb";
import debounce from "lodash/debounce";
export default (function (delay, listenDevicesPollingSkip) {
    var events = new EventEmitter();
    events.setMaxListeners(0);
    var listDevices = getDevices();
    var flatDevice = function (d) { return d.path; };
    var getFlatDevices = function () { return __spreadArray([], __read(new Set(getDevices().map(function (d) { return flatDevice(d); }))), false); };
    var getDeviceByPaths = function (paths) {
        return listDevices.find(function (d) { return paths.includes(flatDevice(d)); });
    };
    var lastDevices = getFlatDevices();
    var poll = function () {
        if (!listenDevicesPollingSkip()) {
            log("hid-listen", "Polling for added or removed devices");
            var changeFound = false;
            var currentDevices_1 = getFlatDevices();
            var newDevices = currentDevices_1.filter(function (d) { return !lastDevices.includes(d); });
            if (newDevices.length > 0) {
                log("hid-listen", "New device found:", newDevices);
                listDevices = getDevices();
                events.emit("add", getDeviceByPaths(newDevices));
                changeFound = true;
            }
            else {
                log("hid-listen", "No new device found");
            }
            var removeDevices_1 = lastDevices.filter(function (d) { return !currentDevices_1.includes(d); });
            if (removeDevices_1.length > 0) {
                log("hid-listen", "Removed device found:", removeDevices_1);
                events.emit("remove", getDeviceByPaths(removeDevices_1));
                listDevices = listDevices.filter(function (d) { return !removeDevices_1.includes(flatDevice(d)); });
                changeFound = true;
            }
            else {
                log("hid-listen", "No removed device found");
            }
            if (changeFound) {
                lastDevices = currentDevices_1;
            }
        }
        else {
            log("hid-listen", "Polling skipped, re-debouncing");
            debouncedPoll();
        }
    };
    var debouncedPoll = debounce(poll, delay);
    var attachDetected = function (device) {
        log("hid-listen", "Device add detected:", device);
        debouncedPoll();
    };
    usb.on("attach", attachDetected);
    log("hid-listen", "attach listener added");
    var detachDetected = function (device) {
        log("hid-listen", "Device removal detected:", device);
        debouncedPoll();
    };
    usb.on("detach", detachDetected);
    log("hid-listen", "detach listener added");
    return {
        stop: function () {
            log("hid-listen", "Stop received, removing listeners and cancelling pending debounced polls");
            debouncedPoll.cancel();
            usb.removeListener("attach", attachDetected);
            usb.removeListener("detach", detachDetected);
        },
        events: events
    };
});
//# sourceMappingURL=listenDevices.js.map