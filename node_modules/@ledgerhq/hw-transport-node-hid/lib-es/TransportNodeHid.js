var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import HID from "node-hid";
import TransportNodeHidNoEvents, { getDevices, } from "@ledgerhq/hw-transport-node-hid-noevents";
import { identifyUSBProductId } from "@ledgerhq/devices";
import { TransportError } from "@ledgerhq/errors";
import listenDevices from "./listenDevices";
var listenDevicesDebounce = 500;
var listenDevicesPollingSkip = function () { return false; };
/**
 * node-hid Transport implementation
 * @example
 * import TransportNodeHid from "@ledgerhq/hw-transport-node-hid";
 * ...
 * TransportNodeHid.create().then(transport => ...)
 */
var TransportNodeHid = /** @class */ (function (_super) {
    __extends(TransportNodeHid, _super);
    function TransportNodeHid() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * if path="" is not provided, the library will take the first device
     */
    TransportNodeHid.open = function (path) {
        return Promise.resolve().then(function () {
            if (path) {
                return new TransportNodeHid(new HID.HID(path));
            }
            var device = getDevices()[0];
            if (!device)
                throw new TransportError("NoDevice", "NoDevice");
            return new TransportNodeHid(new HID.HID(device.path));
        });
    };
    /**
     *
     */
    TransportNodeHid.isSupported = TransportNodeHidNoEvents.isSupported;
    /**
     *
     */
    TransportNodeHid.list = TransportNodeHidNoEvents.list;
    /**
     *
     */
    TransportNodeHid.setListenDevicesDebounce = function (delay) {
        listenDevicesDebounce = delay;
    };
    /**
     *
     */
    TransportNodeHid.setListenDevicesPollingSkip = function (conditionToSkip) {
        listenDevicesPollingSkip = conditionToSkip;
    };
    /**
     *
     */
    TransportNodeHid.setListenDevicesDebug = function () {
        console.warn("setListenDevicesDebug is deprecated. Use @ledgerhq/logs instead. No logs will get emitted there anymore.");
    };
    /**
     */
    TransportNodeHid.listen = function (observer) {
        var unsubscribed = false;
        Promise.resolve(getDevices()).then(function (devices) {
            var e_1, _a;
            try {
                // this needs to run asynchronously so the subscription is defined during this phase
                for (var devices_1 = __values(devices), devices_1_1 = devices_1.next(); !devices_1_1.done; devices_1_1 = devices_1.next()) {
                    var device = devices_1_1.value;
                    if (!unsubscribed) {
                        var descriptor = device.path;
                        var deviceModel = identifyUSBProductId(device.productId);
                        observer.next({
                            type: "add",
                            descriptor: descriptor,
                            device: device,
                            deviceModel: deviceModel
                        });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (devices_1_1 && !devices_1_1.done && (_a = devices_1["return"])) _a.call(devices_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        var _a = listenDevices(listenDevicesDebounce, listenDevicesPollingSkip), events = _a.events, stop = _a.stop;
        var onAdd = function (device) {
            if (unsubscribed || !device)
                return;
            var deviceModel = identifyUSBProductId(device.productId);
            observer.next({
                type: "add",
                descriptor: device.path,
                deviceModel: deviceModel,
                device: device
            });
        };
        var onRemove = function (device) {
            if (unsubscribed || !device)
                return;
            var deviceModel = identifyUSBProductId(device.productId);
            observer.next({
                type: "remove",
                descriptor: device.path,
                deviceModel: deviceModel,
                device: device
            });
        };
        events.on("add", onAdd);
        events.on("remove", onRemove);
        function unsubscribe() {
            unsubscribed = true;
            events.removeListener("add", onAdd);
            events.removeListener("remove", onRemove);
            stop();
        }
        return {
            unsubscribe: unsubscribe
        };
    };
    return TransportNodeHid;
}(TransportNodeHidNoEvents));
export default TransportNodeHid;
//# sourceMappingURL=TransportNodeHid.js.map