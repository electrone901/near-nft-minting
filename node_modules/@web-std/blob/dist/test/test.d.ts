export const assert: {
    deepEqual: typeof uvuassert.equal;
    isEqual: typeof uvuassert.equal;
    isEquivalent: typeof uvuassert.equal;
    ok(actual: any, msg?: uvuassert.Message | undefined): asserts actual;
    is: typeof uvuassert.is;
    equal(actual: any, expects: any, msg?: uvuassert.Message | undefined): void;
    type(actual: any, expects: uvuassert.Types, msg?: uvuassert.Message | undefined): void;
    instance(actual: any, expects: any, msg?: uvuassert.Message | undefined): void;
    snapshot(actual: string, expects: string, msg?: uvuassert.Message | undefined): void;
    fixture(actual: string, expects: string, msg?: uvuassert.Message | undefined): void;
    match(actual: string, expects: string | RegExp, msg?: uvuassert.Message | undefined): void;
    throws(fn: Function, expects?: Function | RegExp | uvuassert.Message | undefined, msg?: uvuassert.Message | undefined): void;
    not: typeof uvuassert.not;
    unreachable(msg?: uvuassert.Message | undefined): void;
    Assertion: typeof uvuassert.Assertion;
};
export const test: uvu.uvu.Test<uvu.Context>;
export type Test = uvu.uvu.Test<uvu.Context>;
import * as uvuassert from "uvu/assert";
import * as uvu from "uvu";
//# sourceMappingURL=test.d.ts.map