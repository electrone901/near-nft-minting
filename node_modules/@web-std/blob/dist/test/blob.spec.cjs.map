{"version":3,"file":"blob.spec.cjs","sources":["../../test/blob.spec.js"],"sourcesContent":["import { Blob, TextDecoder } from \"@web-std/blob\"\nimport * as lib from \"@web-std/blob\"\nimport { assert } from \"./test.js\"\n\n/**\n * @param {import('./test').Test} test\n */\nexport const test = test => {\n  test(\"test baisc\", async () => {\n    assert.isEqual(typeof lib.Blob, \"function\")\n    assert.isEqual(typeof lib.TextDecoder, \"function\")\n    assert.isEqual(typeof lib.TextEncoder, \"function\")\n    assert.isEqual(typeof lib.ReadableStream, \"function\")\n  })\n\n  if (globalThis.window === globalThis) {\n    test(\"exports built-ins\", () => {\n      assert.equal(lib.Blob, globalThis.Blob)\n      assert.equal(lib.TextDecoder, globalThis.TextDecoder)\n      assert.equal(lib.TextEncoder, globalThis.TextEncoder)\n      assert.equal(lib.ReadableStream, globalThis.ReadableStream)\n    })\n  }\n\n  test(\"test jsdom\", async () => {\n    const blob = new Blob([\"TEST\"])\n    assert.isEqual(blob.size, 4, \"Initial blob should have a size of 4\")\n  })\n\n  test(\"should encode a blob with proper size when given two strings as arguments\", async () => {\n    const blob = new Blob([\"hi\", \"hello\"])\n    assert.isEqual(blob.size, 7)\n  })\n\n  test(\"should encode arraybuffers with right content\", async () => {\n    const bytes = new Uint8Array(5)\n    for (let i = 0; i < 5; i++) bytes[i] = i\n    const blob = new Blob([bytes.buffer])\n    const buffer = await blob.arrayBuffer()\n    const result = new Uint8Array(buffer)\n    for (let i = 0; i < 5; i++) {\n      assert.isEqual(result[i], i)\n    }\n  })\n\n  test(\"should encode typed arrays with right content\", async () => {\n    const bytes = new Uint8Array(5)\n    for (let i = 0; i < 5; i++) bytes[i] = i\n    const blob = new Blob([bytes])\n\n    const buffer = await blob.arrayBuffer()\n    const result = new Uint8Array(buffer)\n\n    for (let i = 0; i < 5; i++) {\n      assert.isEqual(result[i], i)\n    }\n  })\n\n  test(\"should encode sliced typed arrays with right content\", async () => {\n    const bytes = new Uint8Array(5)\n    for (let i = 0; i < 5; i++) bytes[i] = i\n    const blob = new Blob([bytes.subarray(2)])\n\n    const buffer = await blob.arrayBuffer()\n    const result = new Uint8Array(buffer)\n    for (let i = 0; i < 3; i++) {\n      assert.isEqual(result[i], i + 2)\n    }\n  })\n\n  test(\"should encode with blobs\", async () => {\n    const bytes = new Uint8Array(5)\n    for (let i = 0; i < 5; i++) bytes[i] = i\n    const blob = new Blob([new Blob([bytes.buffer])])\n    const buffer = await blob.arrayBuffer()\n    const result = new Uint8Array(buffer)\n    for (let i = 0; i < 5; i++) {\n      assert.isEqual(result[i], i)\n    }\n  })\n\n  test(\"should enode mixed contents to right size\", async () => {\n    const bytes = new Uint8Array(5)\n    for (let i = 0; i < 5; i++) {\n      bytes[i] = i\n    }\n    const blob = new Blob([bytes.buffer, \"hello\"])\n    assert.isEqual(blob.size, 10)\n  })\n\n  test(\"should accept mime type\", async () => {\n    const blob = new Blob([\"hi\", \"hello\"], { type: \"text/html\" })\n    assert.isEqual(blob.type, \"text/html\")\n  })\n\n  test(\"should be an instance of constructor\", async () => {\n    const blob = new Blob([\"hi\"])\n    assert.equal(blob instanceof Blob, true)\n  })\n\n  test(\"from text\", async () => {\n    const blob = new Blob([\"hello\"])\n    assert.isEqual(blob.size, 5, \"is right size\")\n    assert.isEqual(blob.type, \"\", \"type is empty\")\n    assert.isEqual(await blob.text(), \"hello\", \"reads as text\")\n    assert.isEquivalent(\n      new Uint8Array(await blob.arrayBuffer()),\n      new Uint8Array(\"hello\".split(\"\").map(char => char.charCodeAt(0)))\n    )\n  })\n\n  test(\"from text with type\", async () => {\n    const blob = new Blob([\"hello\"], { type: \"text/markdown\" })\n    assert.isEqual(blob.size, 5, \"is right size\")\n    assert.isEqual(blob.type, \"text/markdown\", \"type is set\")\n    assert.isEqual(await blob.text(), \"hello\", \"reads as text\")\n\n    assert.isEquivalent(\n      new Uint8Array(await blob.arrayBuffer()),\n      new Uint8Array(\"hello\".split(\"\").map(char => char.charCodeAt(0)))\n    )\n  })\n\n  test(\"empty blob\", async () => {\n    const blob = new Blob([])\n    assert.isEqual(blob.size, 0, \"size is 0\")\n    assert.isEqual(blob.type, \"\", \"type is empty\")\n    assert.isEqual(await blob.text(), \"\", \"reads as text\")\n    assert.isEquivalent(\n      await blob.arrayBuffer(),\n      new ArrayBuffer(0),\n      \"returns empty buffer\"\n    )\n  })\n\n  test(\"no args\", async () => {\n    const blob = new Blob()\n    assert.isEqual(blob.size, 0, \"size is 0\")\n    assert.isEqual(blob.type, \"\", \"type is empty\")\n    assert.isEqual(await blob.text(), \"\", \"reads as text\")\n    assert.isEquivalent(\n      await blob.arrayBuffer(),\n      new ArrayBuffer(0),\n      \"returns empty buffer\"\n    )\n  })\n\n  test(\"all emtpy args\", async () => {\n    const blob = new Blob([\n      \"\",\n      new Blob(),\n      \"\",\n      new Uint8Array(0),\n      new ArrayBuffer(0),\n    ])\n    assert.isEqual(blob.size, 0, \"size is 0\")\n    assert.isEqual(blob.type, \"\", \"type is empty\")\n    assert.isEqual(await blob.text(), \"\", \"reads as text\")\n    assert.isEquivalent(\n      await blob.arrayBuffer(),\n      new ArrayBuffer(0),\n      \"returns empty buffer\"\n    )\n  })\n\n  test(\"combined blob\", async () => {\n    const uint8 = new Uint8Array([1, 2, 3])\n    const uint16 = new Uint16Array([8, 190])\n    const float32 = new Float32Array([5.4, 9, 1.5])\n    const string = \"hello world\"\n    const blob = new Blob([uint8, uint16, float32, string])\n\n    const b8 = blob.slice(0, uint8.byteLength)\n    const r8 = new Uint8Array(await b8.arrayBuffer())\n    assert.isEquivalent(uint8, r8)\n\n    const b16 = blob.slice(\n      uint8.byteLength,\n      uint8.byteLength + uint16.byteLength\n    )\n    const r16 = new Uint16Array(await b16.arrayBuffer())\n    assert.isEquivalent(uint16, r16)\n\n    const b32 = blob.slice(\n      uint8.byteLength + uint16.byteLength,\n      uint8.byteLength + uint16.byteLength + float32.byteLength\n    )\n    const r32 = new Float32Array(await b32.arrayBuffer())\n    assert.isEquivalent(float32, r32)\n\n    const bs = blob.slice(\n      uint8.byteLength + uint16.byteLength + float32.byteLength\n    )\n    assert.isEqual(string, await bs.text())\n\n    assert.isEqual(\"wo\", await bs.slice(6, 8).text())\n    assert.isEqual(\"world\", await bs.slice(6).text())\n    assert.isEqual(\"world\", await blob.slice(-5).text())\n  })\n\n  test(\"emoji\", async () => {\n    const emojis = `👍🤷🎉😤`\n    const blob = new Blob([emojis])\n    const nestle = new Blob([new Blob([blob, blob])])\n    assert.isEqual(emojis + emojis, await nestle.text())\n  })\n\n  test(\"streams\", async () => {\n    const blob = new Blob([\"hello\", \" \", \"world\"], { type: \"text/plain\" })\n    const stream = blob.stream()\n\n    const reader = stream.getReader()\n    const chunks = []\n    while (true) {\n      const { done, value } = await reader.read()\n      if (done) {\n        break\n      }\n\n      if (value != null) {\n        chunks.push(new TextDecoder().decode(value))\n      }\n    }\n\n    assert.deepEqual(\"hello world\", chunks.join(\"\"))\n  })\n}\n"],"names":["assert","lib","Blob","TextDecoder"],"mappings":"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"}