{"version":3,"file":"slice.spec.cjs","sources":["../../test/slice.spec.js"],"sourcesContent":["import { Blob, TextEncoder } from \"@web-std/blob\"\nimport { assert } from \"./test.js\"\n\n/**\n *\n * @param {Blob} blob\n * @param {Object} expected\n * @param {number} expected.size\n * @param {string} [expected.type]\n * @param {Uint8Array[]} expected.content\n */\nconst assertBlob = async (blob, expected) => {\n  assert.equal(blob instanceof Blob, true, \"blob is instanceof Blob\")\n  assert.equal(String(blob), \"[object Blob]\", \"String(blob) -> [object Blob]\")\n  assert.equal(\n    blob.toString(),\n    \"[object Blob]\",\n    \"blob.toString() -> [object Blob]\"\n  )\n  assert.equal(blob.size, expected.size, `blob.size == ${expected.size}`)\n  assert.equal(blob.type, expected.type || \"\", \"blob.type\")\n\n  const chunks = []\n  // @ts-ignore - https://github.com/microsoft/TypeScript/issues/29867\n  const stream = blob.stream()\n  const reader = stream.getReader()\n  while (true) {\n    const chunk = await reader.read()\n    if (chunk.done) {\n      reader.releaseLock()\n      break\n    } else {\n      chunks.push(chunk.value)\n    }\n  }\n\n  assert.deepEqual(\n    concatUint8Array(chunks),\n    concatUint8Array(expected.content),\n    \"blob.stream() matches expectation\"\n  )\n\n  let text = \"\"\n  const encoder = new TextDecoder()\n  for (const chunk of expected.content) {\n    text += encoder.decode(chunk)\n  }\n\n  assert.deepEqual(\n    await blob.text(),\n    text,\n    \"blob.text() produces expected text\"\n  )\n\n  // Not all browsers implement this\n  const bytes = concatUint8Array(expected.content)\n  const buffer = await blob.arrayBuffer()\n  assert.equal(buffer instanceof ArrayBuffer, true)\n  assert.deepEqual(buffer, bytes.buffer)\n  assert.deepEqual(\n    new Uint8Array(buffer),\n    bytes,\n    \"blob.arrayBuffer() produces expected buffer\"\n  )\n}\n\n/**\n * @param {Uint8Array[]} chunks\n */\nconst concatUint8Array = chunks => {\n  const bytes = []\n  for (const chunk of chunks) {\n    bytes.push(...chunk)\n  }\n  return new Uint8Array(bytes)\n}\n\n/**\n * @param {*} input\n * @returns {Uint8Array}\n */\nconst toUint8Array = input => {\n  if (typeof input === \"string\") {\n    return new TextEncoder().encode(input)\n  } else if (input instanceof ArrayBuffer) {\n    return new Uint8Array(input)\n  } else if (input instanceof Uint8Array) {\n    return input\n  } else if (ArrayBuffer.isView(input)) {\n    return new Uint8Array(input.buffer, input.byteOffset, input.byteLength)\n  } else {\n    throw new TypeError(`Invalid input ${input}`)\n  }\n}\n\n/**\n * @param {import('./test').Test} test\n */\nexport const test = test => {\n  test(\"new Blob()\", async () => {\n    const blob = new Blob()\n\n    await assertBlob(blob, {\n      type: \"\",\n      size: 0,\n      content: [],\n    })\n  })\n\n  test('new Blob(\"a=1\")', async () => {\n    const data = \"a=1\"\n    const blob = new Blob([data])\n\n    await assertBlob(blob, {\n      size: 3,\n      type: \"\",\n      content: [toUint8Array(data)],\n    })\n  })\n\n  test(\"Blob with mixed parts\", async () => {\n    const parts = [\n      \"a\",\n      new Uint8Array([98]),\n      new Uint16Array([25699]),\n      new Uint8Array([101]).buffer,\n      new TextEncoder().encode(\"f\"),\n      new Blob([\"g\"]),\n    ]\n\n    await assertBlob(new Blob(parts), {\n      size: 7,\n      content: [...parts.slice(0, -1).map(toUint8Array), toUint8Array(\"g\")],\n    })\n  })\n\n  test(\"Blob slice\", async () => {\n    const parts = [\"hello \", \"world\"]\n    const blob = new Blob(parts)\n\n    await assertBlob(blob, {\n      size: 11,\n      content: parts.map(toUint8Array),\n    })\n\n    assertBlob(blob.slice(), {\n      size: 11,\n      content: parts.map(toUint8Array),\n    })\n\n    assertBlob(blob.slice(2), {\n      size: 9,\n      content: [toUint8Array(\"llo \"), toUint8Array(\"world\")],\n    })\n\n    assertBlob(blob.slice(5), {\n      size: 6,\n      content: [toUint8Array(\" \"), toUint8Array(\"world\")],\n    })\n\n    assertBlob(blob.slice(6), {\n      size: 5,\n      content: [toUint8Array(\"world\")],\n    })\n\n    assertBlob(blob.slice(5, 100), {\n      size: 6,\n      content: [toUint8Array(\" \"), toUint8Array(\"world\")],\n    })\n\n    assertBlob(blob.slice(-5), {\n      size: 5,\n      content: [toUint8Array(\"world\")],\n    })\n\n    assertBlob(blob.slice(-5, -10), {\n      size: 0,\n      content: [],\n    })\n\n    assertBlob(blob.slice(-5, -2), {\n      size: 3,\n      content: [toUint8Array(\"wor\")],\n    })\n\n    assertBlob(blob.slice(-5, 11), {\n      size: 5,\n      content: [toUint8Array(\"world\")],\n    })\n\n    assertBlob(blob.slice(-5, 12), {\n      size: 5,\n      content: [toUint8Array(\"world\")],\n    })\n\n    assertBlob(blob.slice(-5, 10), {\n      size: 4,\n      content: [toUint8Array(\"worl\")],\n    })\n  })\n\n  test(\"Blob type\", async () => {\n    const type = \"text/plain\"\n    const blob = new Blob([], { type })\n    await assertBlob(blob, { size: 0, type, content: [] })\n  })\n\n  test(\"Blob slice type\", async () => {\n    const type = \"text/plain\"\n    const blob = new Blob().slice(0, 0, type)\n    await assertBlob(blob, { size: 0, type, content: [] })\n  })\n\n  test(\"invalid Blob type\", async () => {\n    const blob = new Blob([], { type: \"\\u001Ftext/plain\" })\n    await assertBlob(blob, { size: 0, type: \"\", content: [] })\n  })\n\n  test(\"invalid Blob slice type\", async () => {\n    const blob = new Blob().slice(0, 0, \"\\u001Ftext/plain\")\n    await assertBlob(blob, { size: 0, type: \"\", content: [] })\n  })\n\n  test(\"normalized Blob type\", async () => {\n    const blob = new Blob().slice(0, 0, \"text/Plain\")\n    await assertBlob(blob, { size: 0, type: \"text/plain\", content: [] })\n  })\n\n  test(\"Blob slice(0, 1)\", async () => {\n    const data = \"abcdefgh\"\n    const blob = new Blob([data]).slice(0, 1)\n    await assertBlob(blob, {\n      size: 1,\n      content: [toUint8Array(\"a\")],\n    })\n  })\n\n  test(\"Blob slice(-1)\", async () => {\n    const data = \"abcdefgh\"\n    const blob = new Blob([data]).slice(-1)\n    await assertBlob(blob, {\n      size: 1,\n      content: [toUint8Array(\"h\")],\n    })\n  })\n\n  test(\"Blob slice(0, -1)\", async () => {\n    const data = \"abcdefgh\"\n    const blob = new Blob([data]).slice(0, -1)\n    await assertBlob(blob, {\n      size: 7,\n      content: [toUint8Array(\"abcdefg\")],\n    })\n  })\n\n  test(\"blob.slice(1, 2)\", async () => {\n    const blob = new Blob([\"a\", \"b\", \"c\"]).slice(1, 2)\n    await assertBlob(blob, {\n      size: 1,\n      content: [toUint8Array(\"b\")],\n    })\n  })\n}\n"],"names":["assert","Blob","TextEncoder"],"mappings":"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"}